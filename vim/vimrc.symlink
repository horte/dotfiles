" Backspace enable
set backspace=indent,eol,start

" Set leader
let mapleader=","

" jk is escape
inoremap jk <esc>
inoremap kj <esc>

" Include line wrapped lines
nmap j gj
nmap k gk

" Window Navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

let &t_Co=256

" Set tab
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" Toggle set paste
set pastetoggle=<F2>

" Enable line numbers
" set relativenumber
set number

" Highlight cursor line
set cursorline
highlight Cursor guifg=white guibg=black
highlight iCursor guifg=white guibg=steelblue
set guicursor=n-v-c:block-Cursor
set guicursor+=n-v-c:blinkon0
if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" Disable bell
set visualbell t_vb=

" visual autocomplete for command menu
set wildmenu

" Automatically refresh buffer if file is changed on disk
set autoread

" Change between buffers
map <Leader>a :bprev<Return>
map <Leader>s :bnext<Return>

" Enable syntax highlighting
syntax on

" Folding method
set foldmethod=syntax
set foldlevelstart=4
let javaScript_fold=1         " JavaScript
let php_folding=1             " PHP
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML

" Add .js when using gf
set suffixesadd+=.js

" Set tabstop, softtabstop and shiftwidth to the same value
" http://vimcasts.org/episodes/tabs-and-spaces/
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

" Disable backup and swap files
set nobackup
set noswapfile
set backupdir=/tmp              " where to put backup files
set directory=/tmp                " where to put swap files
set undodir=/tmp

" Set encoding to utf-8
if !has('nvim')
  set encoding=utf-8
endif

set fileformat=unix

" Highlight search results
set hlsearch

" turn off search highlight
nnoremap <leader>m :nohlsearch<CR>

" Automatically search when typing
set incsearch

" Ignore case for searches
set ignorecase
set laststatus=2
set splitright
set title
set wrap

" Show matching brackets
set showmatch

" Copy to system clipboard
set clipboard=unnamed

" Tagbar Settings
nmap <leader>b :TagbarToggle<CR>

" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')
  Plug 'pangloss/vim-javascript'
  Plug 'moll/vim-node'
  Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
  Plug 'valloric/youcompleteme', { 'do': './install.py --tern-completer' }
  Plug 'w0rp/ale'
  Plug 'kien/ctrlp.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'airblade/vim-gitgutter'
  Plug 'vim-airline/vim-airline'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'mileszs/ack.vim'
  Plug 'chriskempson/base16-vim'
" Initialize plugin system
call plug#end()

if &runtimepath =~ 'airline'
  " Airline Plugin Settings 
  " let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled=1
   
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif
  let g:airline_symbols.space = "\ua0"
endif

if &runtimepath =~ 'tern_for_vim'
  nmap <leader>tr :TernRefs<Enter>
  nmap <leader>tR :TernRename<Enter>
  nmap <leader>td :TernDef<Enter>
  nmap <leader>tD :TernDoc<Enter>
endif

if &runtimepath =~ 'nerdtree'
  " Toggle NerdTree
  map <C-n> :NERDTreeToggle<CR>
  let g:NERDTreeChDirMode = 2
  let g:NERDTreeHijackNetrw=0
endif

let base16colorspace=256

if &runtimepath =~ 'base16-vim'
  syntax enable
  colorscheme base16-tomorrow-night
  if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
  endif
endif

if &runtimepath =~ 'ctrlp'
  " Ctrlp Plugin Settings
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
  let g:ctrlp_custom_ignore = {
    \ 'dir':  'bower_components\|dist\|node_modules\|\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ 'link': 'some_bad_symbolic_links',
    \ }
  let g:ctrlp_match_window = 'bottom,order:ttb'
  let g:ctrlp_switch_buffer = 0
  let g:ctrlp_working_path_mode = 0
  let g:ctrlp_user_command = '/usr/local/bin/ag %s -l --nocolor --hidden -g ""'
endif

if &runtimepath =~ 'editorconfig'
  let g:EditorConfig_exclude_patterns = ['fugitive://.*']
endif

if &runtimepath =~ 'ack.vim'
  if executable('ag')
    let g:ackprg = 'ag --vimgrep'
  endif
endif
